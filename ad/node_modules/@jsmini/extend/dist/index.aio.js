/*!
 * extend 0.2.1 (https://github.com/jsmini/extend)
 * API https://github.com/jsmini/extend/blob/master/doc/api.md
 * Copyright 2017-2018 jsmini. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/extend/blob/master/LICENSE)
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.jsmini_extend = {})));
}(this, (function (exports) { 'use strict';

    /*!
     * type 0.4.1 (https://github.com/jsmini/type)
     * API https://github.com/jsmini/type/blob/master/doc/api.md
     * Copyright 2017-2018 jsmini. All Rights Reserved
     * Licensed under MIT (https://github.com/jsmini/type/blob/master/LICENSE)
     */

    const toString = Object.prototype.toString;

    function type(x) {
        if(x === null){
            return 'null';
        }

        const t= typeof x;

        if(t !== 'object'){
            return t;
        }

        let c;
        try {
            c = toString.call(x).slice(8, -1).toLowerCase();
        } catch(e) {
            return 'object';
        }

        if(c !== 'object'){
            return c;
        }

        if(x.constructor == Object){
            return c;
        }

        try {
            // Object.create(null)
            if (Object.getPrototypeOf(x) === null || x.__proto__ === null) {
                return 'object';
            }

            return 'unknown';
        } catch(e) {
            // ie下无Object.getPrototypeOf
            return 'unknown';
        }
    }

    /*!
     * is 0.7.1 (https://github.com/jsmini/is)
     * API https://github.com/jsmini/is/blob/master/doc/api.md
     * Copyright 2017-2018 yanhaijing. All Rights Reserved
     * Licensed under MIT (https://github.com/jsmini/is/blob/master/LICENSE)
     */

    function isObject(x) {
        return type(x) === 'object';
    }

    function isFunction(x) {
        return type(x) === 'function';
    }

    const isArray = isFunction(Array.isArray) ? Array.isArray : function isArray(x) {
        return type(x) === 'array';
    };

    // Object.create(null) 的对象，没有hasOwnProperty方法
    function hasOwnProp(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }

    var assign = isFunction(Object.assign) ? Object.assign : function assign(target) {
        if (!isObject(target)) {
            throw new TypeError('assign first param must is object');
        }

        for (var _len = arguments.length, sourceList = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            sourceList[_key - 1] = arguments[_key];
        }

        for (var i = 0; i < sourceList.length; i++) {
            var source = sourceList[i];

            if (isObject(source)) {
                for (var key in source) {
                    if (hasOwnProp(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
        }

        return target;
    };

    function extend() {
        return assign.apply(undefined, arguments);
    }

    function extendDeep(target) {
        // 深拷贝
        if (!isObject(target) && !isArray(target)) {
            throw new TypeError('extend target param must is object');
        }

        for (var _len2 = arguments.length, sourceList = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            sourceList[_key2 - 1] = arguments[_key2];
        }

        for (var i = 0; i < sourceList.length; i++) {
            var source = sourceList[i];
            for (var name in source) {
                var src = target[name];
                var copy = source[name];

                //避免无限循环
                if (target === copy) {
                    continue;
                }

                // 非可枚举属性
                if (!hasOwnProp(source, name)) {
                    continue;
                }

                var copyIsArr = void 0;
                if (copy && (isObject(copy) || (copyIsArr = isArray(copy)))) {
                    var clone = void 0;
                    if (copyIsArr) {
                        clone = src && isArray(src) ? src : [];
                    } else {
                        clone = src && isObject(src) ? src : {};
                    }
                    target[name] = extendDeep(clone, copy);
                } else if (typeof copy !== 'undefined') {
                    target[name] = copy;
                }
            }
        }

        return target;
    }

    exports.assign = assign;
    exports.extend = extend;
    exports.extendDeep = extendDeep;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
